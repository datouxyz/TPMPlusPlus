/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitkRegionalMinimaImageFilter_h
#define sitkRegionalMinimaImageFilter_h

/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkImageFilterTemplate.h.in to make changes.
 */

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

namespace itk {
  namespace simple {

    /**\class RegionalMinimaImageFilter
\brief Produce a binary image where foreground is the regional minima of the input image.

Regional minima are flat zones surrounded by pixels of greater value.

If the input image is constant, the entire image can be considered as a minima or not. The SetFlatIsMinima() method let the user choose which behavior to use.

This class was contributed to the Insight Journal by \author Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France. https://hdl.handle.net/1926/153 


\see RegionalMaximaImageFilter 


\see ValuedRegionalMinimaImageFilter 


\see HConcaveImageFilter
\sa itk::simple::RegionalMinima for the procedural interface
\sa itk::RegionalMinimaImageFilter for the Doxygen on the original ITK class.
     */
    class SITKBasicFilters_EXPORT RegionalMinimaImageFilter : public ImageFilter {
    public:
      using Self = RegionalMinimaImageFilter;

      /** Destructor */
      virtual ~RegionalMinimaImageFilter();

      /** Default Constructor that takes no arguments and initializes
       * default parameters */
      RegionalMinimaImageFilter();

      /** Define the pixels types supported by this filter */
      using PixelIDTypeList = ScalarPixelIDTypeList;
\

      /**
       * Set/Get the value used as "background" in the output image. Defaults to NumericTraits<PixelType>::NonpositiveMin() .
       */
      SITK_RETURN_SELF_TYPE_HEADER SetBackgroundValue ( double BackgroundValue ) { this->m_BackgroundValue = BackgroundValue; return *this; }

      /**
       * Set/Get the value used as "background" in the output image. Defaults to NumericTraits<PixelType>::NonpositiveMin() .
       */
      double GetBackgroundValue() const { return this->m_BackgroundValue; }\

      /**
       * Set/Get the value in the output image to consider as "foreground". Defaults to maximum value of PixelType.
       */
      SITK_RETURN_SELF_TYPE_HEADER SetForegroundValue ( double ForegroundValue ) { this->m_ForegroundValue = ForegroundValue; return *this; }

      /**
       * Set/Get the value in the output image to consider as "foreground". Defaults to maximum value of PixelType.
       */
      double GetForegroundValue() const { return this->m_ForegroundValue; }\

      /**
       * Set/Get whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.
       */
      SITK_RETURN_SELF_TYPE_HEADER SetFullyConnected ( bool FullyConnected ) { this->m_FullyConnected = FullyConnected; return *this; }

      /** Set the value of FullyConnected to true or false respectfully. */
      SITK_RETURN_SELF_TYPE_HEADER FullyConnectedOn() { return this->SetFullyConnected(true); }
      SITK_RETURN_SELF_TYPE_HEADER FullyConnectedOff() { return this->SetFullyConnected(false); }

      /**
       * Set/Get whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.
       */
      bool GetFullyConnected() const { return this->m_FullyConnected; }\

      /**
       * Set/Get wether a flat image must be considered as a minima or not. Defaults to true.
       */
      SITK_RETURN_SELF_TYPE_HEADER SetFlatIsMinima ( bool FlatIsMinima ) { this->m_FlatIsMinima = FlatIsMinima; return *this; }

      /** Set the value of FlatIsMinima to true or false respectfully. */
      SITK_RETURN_SELF_TYPE_HEADER FlatIsMinimaOn() { return this->SetFlatIsMinima(true); }
      SITK_RETURN_SELF_TYPE_HEADER FlatIsMinimaOff() { return this->SetFlatIsMinima(false); }

      /**
       * Set/Get wether a flat image must be considered as a minima or not. Defaults to true.
       */
      bool GetFlatIsMinima() const { return this->m_FlatIsMinima; }

      /** Name of this class */
      std::string GetName() const { return std::string ("RegionalMinimaImageFilter"); }

      /** Print ourselves out */
      std::string ToString() const;


      /** Execute the filter on the input image */

      Image Execute ( const Image& image1 );

    private:

      /** Setup for member function dispatching */

      using MemberFunctionType = Image (Self::*)( const Image& image1 );
      template <class TImageType> Image ExecuteInternal ( const Image& image1 );


      friend struct detail::MemberFunctionAddressor<MemberFunctionType>;

      std::unique_ptr<detail::MemberFunctionFactory<MemberFunctionType> > m_MemberFactory;


      /*  */
      double  m_BackgroundValue{0.0};

      /*  */
      double  m_ForegroundValue{1.0};

      /*  */
      bool  m_FullyConnected{false};

      bool  m_FlatIsMinima{true};


    };

    /**\
     * \brief Produce a binary image where foreground is the regional minima of the input image.
     *
     * This function directly calls the execute method of RegionalMinimaImageFilter
     * in order to support a procedural API
     *
     * \sa itk::simple::RegionalMinimaImageFilter for the object oriented interface
     * @{
     */

     SITKBasicFilters_EXPORT Image RegionalMinima ( const Image& image1, double backgroundValue = 0.0, double foregroundValue = 1.0, bool fullyConnected = false, bool flatIsMinima = true );

     /** @} */
  }
}
#endif
