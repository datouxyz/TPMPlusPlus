/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitkSquaredDifferenceImageFilter_h
#define sitkSquaredDifferenceImageFilter_h

/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkBinaryFunctorFilterTemplate.h.in to make changes.
 */

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

namespace itk {
  namespace simple {

    /**\class SquaredDifferenceImageFilter
\brief Implements pixel-wise the computation of squared difference.

This filter is parameterized over the types of the two input images and the type of the output image.

Numeric conversions (castings) are done by the C++ defaults.

The filter will walk over all the pixels in the two input images, and for each one of them it will do the following:



\li cast the input 1 pixel value to double 

\li cast the input 2 pixel value to double 

\li compute the difference of the two pixel values

\li compute the square of the difference

\li cast the double value resulting from sqr() to the pixel type of the output image

\li store the casted value into the output image.




The filter expect all images to have the same dimension (e.g. all 2D, or all 3D, or all ND)
\sa itk::simple::SquaredDifference for the procedural interface
\sa itk::SquaredDifferenceImageFilter for the Doxygen on the original ITK class.
     */
    class SITKBasicFilters_EXPORT SquaredDifferenceImageFilter : public ImageFilter {
    public:
      using Self = SquaredDifferenceImageFilter;

      /** Destructor */
      virtual ~SquaredDifferenceImageFilter();

      /** Default Constructor that takes no arguments and initializes
       * default parameters */
      SquaredDifferenceImageFilter();

      /** Define the pixels types supported by this filter */
      using PixelIDTypeList = BasicPixelIDTypeList;



      /** Name of this class */
      std::string GetName() const { return std::string ("SquaredDifferenceImageFilter"); }

      /** Print ourselves out */
      std::string ToString() const;


      /** Execute the filter on the input images */
#ifndef SWIG
      Image Execute ( Image&& image1, const Image& image2 );
#endif
      Image Execute ( const Image& image1, const Image& image2 );

      /** Execute the filter with an image and a constant */
      Image Execute ( const Image& image1, double constant );
#ifndef SWIG
      Image Execute ( Image&& image1, double constant );
#endif
      Image Execute ( double constant, const Image& image2 );


    private:

      /** Setup for member function dispatching */

      using MemberFunctionType = Image (Self::*)( const Image& image1, const Image& image2 );
      template <class TImageType> Image ExecuteInternal ( const Image& image1, const Image& image2 );


      friend struct detail::MemberFunctionAddressor<MemberFunctionType>;

      std::unique_ptr<detail::MemberFunctionFactory<MemberFunctionType> > m_MemberFactory;
      using MemberFunction1Type = Image (Self::*)( double constant, const Image& image2 );
      template <class TImageType> Image ExecuteInternal ( double constant, const Image& image2 );
      friend struct detail::MemberFunctionAddressor<MemberFunction1Type>;
      std::unique_ptr<detail::MemberFunctionFactory<MemberFunction1Type> > m_MemberFactory1;

      using MemberFunction2Type = Image (Self::*)( const Image& image1, double constant );
      template <class TImageType> Image ExecuteInternal ( const Image& image1, double constant );
      friend struct detail::MemberFunctionAddressor<MemberFunction2Type>;
      std::unique_ptr<detail::MemberFunctionFactory<MemberFunction2Type> > m_MemberFactory2;



      bool m_InPlace{false};
    };

    /**\
     * \brief Implements pixel-wise the computation of squared difference.
     *
     * This function directly calls the execute method of SquaredDifferenceImageFilter
     * in order to support a procedural API
     *
     * \sa itk::simple::SquaredDifferenceImageFilter for the object oriented interface
     * @{
     */
#ifndef SWIG
     SITKBasicFilters_EXPORT Image SquaredDifference ( Image&& image1, const Image& image2 );
#endif
     SITKBasicFilters_EXPORT Image SquaredDifference ( const Image& image1, const Image& image2 );

     /** @} */
     SITKBasicFilters_EXPORT Image SquaredDifference ( const Image& image1, double constant );
#ifndef  SWIG
     SITKBasicFilters_EXPORT Image SquaredDifference ( Image&& image1, double constant );
#endif
     SITKBasicFilters_EXPORT Image SquaredDifference ( double constant, const Image& image2 );
  }
}
#endif
